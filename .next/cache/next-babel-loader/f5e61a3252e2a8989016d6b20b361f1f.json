{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport firebase from \"firebase/app\";\nimport firebaseui from \"firebaseui\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\"; //Firebaseを使ってFirebaseUI Widgetを初期化\n\nvar ui = new firebaseui.auth.AuthUI(firebase.auth());\nui.start('#firebaseui-auth-container', {\n  signInOptions: [{\n    provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    signInMethod: firebase.auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD,\n    //以下のActionCodeSettingsオブジェクトで指定されたモバイルアプリを含め、\n    //ユーザーがクロスデバイスでサインインを完了する機能を許可\n    forceSameDevice: false,\n    //追加の状態をリクエストに渡す必要がある場合や、\n    //モバイルアプリがインストールされている場合にリンクを開くかどうかを定義するために使用\n    emailLinkSignIn: function () {\n      return {\n        // Additional state showPromo=1234 can be retrieved from URL on\n        // sign-in completion in signInSuccess callback by checking\n        // window.location.href.\n        url: 'https://www.example.com/completeSignIn?showPromo=1234',\n        // Custom FDL domain.\n        dynamicLinkDomain: 'example.page.link',\n        // Always true for email link sign-in.\n        handleCodeInApp: true,\n        // Whether to handle link in iOS app if installed.\n        iOS: {\n          bundleId: 'com.example.ios'\n        },\n        // Whether to handle link in Android app if opened in an Android\n        // device.\n        android: {\n          packageName: 'com.example.android',\n          installApp: true,\n          minimumVersion: '12'\n        }\n      };\n    }\n  }] // その他の設定オプション\n\n}); // Firebase設定\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA3edHzgEMFoK9bzVPHHJ3DeRFiUnHrsiI\",\n  authDomain: \"harvest-6137e.firebaseapp.com\",\n  databaseURL: \"https://harvest-6137e-default-rtdb.firebaseio.com\",\n  projectId: \"harvest-6137e\",\n  storageBucket: \"harvest-6137e.appspot.com\",\n  messagingSenderId: \"749707619690\",\n  appId: \"1:749707619690:web:5947ccf93ab56de5a10913\",\n  measurementId: \"G-RFMQZPT3CT\"\n}; // Firebase初期化\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n} // ステート初期値\n\n\nconst initial = {\n  message: 'START',\n  count: 0\n}; // レデューサー\n\nfunction counterReducer(state = initial, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        message: 'INCREMENT',\n        count: state.count + 1\n      };\n\n    case 'DECREMENT':\n      return {\n        message: 'DECREMENT',\n        count: state.count - 1\n      };\n\n    case 'RESET':\n      return {\n        message: 'RESET',\n        count: initial.count\n      };\n\n    default:\n      return state;\n  }\n} // initStore関数（redux-store.jsで必要）\n\n\nexport function initStore(state = initial) {\n  return createStore(counterReducer, state, applyMiddleware(thunkMiddleware));\n}","map":{"version":3,"sources":["/Users/kataokayuuto/Desktop/react-study/Harvest_next/store.js"],"names":["createStore","applyMiddleware","thunkMiddleware","firebase","firebaseui","ui","auth","AuthUI","start","signInOptions","provider","EmailAuthProvider","PROVIDER_ID","signInMethod","EMAIL_LINK_SIGN_IN_METHOD","forceSameDevice","emailLinkSignIn","url","dynamicLinkDomain","handleCodeInApp","iOS","bundleId","android","packageName","installApp","minimumVersion","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","apps","length","initializeApp","initial","message","count","counterReducer","state","action","type","initStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,eAAP;AACA,OAAO,oBAAP,C,CAEA;;AACA,IAAIC,EAAE,GAAG,IAAID,UAAU,CAACE,IAAX,CAAgBC,MAApB,CAA2BJ,QAAQ,CAACG,IAAT,EAA3B,CAAT;AAEAD,EAAE,CAACG,KAAH,CAAS,4BAAT,EAAuC;AACrCC,EAAAA,aAAa,EAAE,CACb;AACEC,IAAAA,QAAQ,EAAEP,QAAQ,CAACG,IAAT,CAAcK,iBAAd,CAAgCC,WAD5C;AAEEC,IAAAA,YAAY,EAAEV,QAAQ,CAACG,IAAT,CAAcK,iBAAd,CAAgCG,yBAFhD;AAGE;AACA;AACAC,IAAAA,eAAe,EAAE,KALnB;AAME;AACA;AACAC,IAAAA,eAAe,EAAE,YAAW;AAC1B,aAAO;AACL;AACA;AACA;AACAC,QAAAA,GAAG,EAAE,uDAJA;AAKL;AACAC,QAAAA,iBAAiB,EAAE,mBANd;AAOL;AACAC,QAAAA,eAAe,EAAE,IARZ;AASL;AACAC,QAAAA,GAAG,EAAE;AACHC,UAAAA,QAAQ,EAAE;AADP,SAVA;AAaL;AACA;AACAC,QAAAA,OAAO,EAAE;AACPC,UAAAA,WAAW,EAAE,qBADN;AAEPC,UAAAA,UAAU,EAAE,IAFL;AAGPC,UAAAA,cAAc,EAAE;AAHT;AAfJ,OAAP;AAqBD;AA9BH,GADa,CADsB,CAmCrC;;AAnCqC,CAAvC,E,CAsCA;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,+BAFS;AAGrBC,EAAAA,WAAW,EAAE,mDAHQ;AAIrBC,EAAAA,SAAS,EAAE,eAJU;AAKrBC,EAAAA,aAAa,EAAE,2BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB,C,CAUA;;AACA,IAAI/B,QAAQ,CAACgC,IAAT,CAAcC,MAAd,KAAyB,CAA7B,EAAgC;AAC9BjC,EAAAA,QAAQ,CAACkC,aAAT,CAAuBX,cAAvB;AACD,C,CAED;;;AACA,MAAMY,OAAO,GAAG;AACdC,EAAAA,OAAO,EAAC,OADM;AAEdC,EAAAA,KAAK,EAAE;AAFO,CAAhB,C,CAMA;;AACA,SAASC,cAAT,CAAyBC,KAAK,GAAGJ,OAAjC,EAA0CK,MAA1C,EAAkD;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO;AACLL,QAAAA,OAAO,EAAE,WADJ;AAELC,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAFhB,OAAP;;AAIF,SAAK,WAAL;AACE,aAAO;AACLD,QAAAA,OAAO,EAAE,WADJ;AAELC,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAFhB,OAAP;;AAIF,SAAK,OAAL;AACE,aAAO;AACLD,QAAAA,OAAO,EAAE,OADJ;AAELC,QAAAA,KAAK,EAAEF,OAAO,CAACE;AAFV,OAAP;;AAIF;AACE,aAAOE,KAAP;AAjBJ;AAmBD,C,CAGD;;;AACA,OAAO,SAASG,SAAT,CAAmBH,KAAK,GAAGJ,OAA3B,EAAoC;AACzC,SAAOtC,WAAW,CAACyC,cAAD,EAAiBC,KAAjB,EAChBzC,eAAe,CAACC,eAAD,CADC,CAAlB;AAED","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport firebase from \"firebase/app\";\nimport firebaseui from \"firebaseui\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\n//Firebaseを使ってFirebaseUI Widgetを初期化\nvar ui = new firebaseui.auth.AuthUI(firebase.auth());\n\nui.start('#firebaseui-auth-container', {\n  signInOptions: [\n    {\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      signInMethod: firebase.auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD,\n      //以下のActionCodeSettingsオブジェクトで指定されたモバイルアプリを含め、\n      //ユーザーがクロスデバイスでサインインを完了する機能を許可\n      forceSameDevice: false,\n      //追加の状態をリクエストに渡す必要がある場合や、\n      //モバイルアプリがインストールされている場合にリンクを開くかどうかを定義するために使用\n      emailLinkSignIn: function() {\n        return {\n          // Additional state showPromo=1234 can be retrieved from URL on\n          // sign-in completion in signInSuccess callback by checking\n          // window.location.href.\n          url: 'https://www.example.com/completeSignIn?showPromo=1234',\n          // Custom FDL domain.\n          dynamicLinkDomain: 'example.page.link',\n          // Always true for email link sign-in.\n          handleCodeInApp: true,\n          // Whether to handle link in iOS app if installed.\n          iOS: {\n            bundleId: 'com.example.ios'\n          },\n          // Whether to handle link in Android app if opened in an Android\n          // device.\n          android: {\n            packageName: 'com.example.android',\n            installApp: true,\n            minimumVersion: '12'\n          }\n        };\n      }\n    }\n  ]\n  // その他の設定オプション\n});\n\n// Firebase設定\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA3edHzgEMFoK9bzVPHHJ3DeRFiUnHrsiI\",\n  authDomain: \"harvest-6137e.firebaseapp.com\",\n  databaseURL: \"https://harvest-6137e-default-rtdb.firebaseio.com\",\n  projectId: \"harvest-6137e\",\n  storageBucket: \"harvest-6137e.appspot.com\",\n  messagingSenderId: \"749707619690\",\n  appId: \"1:749707619690:web:5947ccf93ab56de5a10913\",\n  measurementId: \"G-RFMQZPT3CT\"\n};\n// Firebase初期化\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\n// ステート初期値\nconst initial = {\n  message:'START',\n  count: 0\n}\n\n\n// レデューサー\nfunction counterReducer (state = initial, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        message: 'INCREMENT',\n        count: state.count + 1\n      };\n    case 'DECREMENT':\n      return {\n        message: 'DECREMENT',\n        count: state.count - 1\n      };\n    case 'RESET':\n      return {\n        message: 'RESET',\n        count: initial.count\n      };\n    default:\n      return state;\n  }\n}\n\n\n// initStore関数（redux-store.jsで必要）\nexport function initStore(state = initial) {\n  return createStore(counterReducer, state,\n    applyMiddleware(thunkMiddleware))\n}"]},"metadata":{},"sourceType":"module"}